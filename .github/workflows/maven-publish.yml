name: Deploy Spring Boot App to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # ... (Build steps remain the same)

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          # Add the EC2 host key - DO NOT DISABLE HOST KEY CHECKING
          echo "${{ secrets.EC2_HOST_KEY }}" >> ~/.ssh/known_hosts

      - name: Deploy application (using instance name)
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ secrets.EC2_INSTANCE_NAME }}" --query 'Reservations[*].Instances[*].InstanceId' --output text)
          # Get the public IP address of the EC2 instance (more reliable)
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)

          ssh -i ~/.ssh/id_rsa ubuntu@$PUBLIC_IP "
            docker pull ${{ secrets.ECR_REGISTRY }}:${{ github.sha }} &&
            docker stop --time=10 my-app || true &&
            docker rm my-app || true &&
            docker run -d -p 8080:8080 --name my-app ${{ secrets.ECR_REGISTRY }}:${{ github.sha }}
          "