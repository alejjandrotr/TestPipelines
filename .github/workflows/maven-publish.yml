name: Deploy Spring Boot App to AWS EC2

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package

      - name: Build and tag Docker image
        run: docker build -t ${{ secrets.ECR_REGISTRY }}:${{ github.sha }} .

      - name: Configure AWS Credentials (for ECR push)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-ids: ${{ secrets.AWS_ACCOUNT_ID }}
          aws-region: us-east-1

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.ECR_REGISTRY }}:${{ github.sha }}

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run tests and check Jacoco coverage
        id: coverage_check  # Add an ID to the step
        run: |
          mvn clean verify
          COVERAGE=$(mvn jacoco:report | grep "overall:" | awk '{print $2}' | tr -d "%,")
          echo "Code coverage: $COVERAGE%"
          echo "::set-output name=coverage::$COVERAGE" # Set the coverage as an output variable
          if (( $(echo "$COVERAGE < 99" | bc -l) )); then # Example: 99% threshold
            echo "Code coverage is below 99%. Failing the build."
            exit 1 # Fail the step if coverage is below threshold
          fi

      - name: Fail workflow if coverage is insufficient
        if: steps.coverage_check.outcome == 'failure' # Check the outcome of the previous step
        run: exit 1

  sonarqube:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: SonarQube scan
        run: |
          mvn sonar:sonar -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=600  -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Deploy application (using SSM)
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ secrets.EC2_INSTANCE_NAME }}" --query 'Reservations[*].Instances[*].InstanceId' --output text)
          
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              \"docker pull ${{ secrets.ECR_REGISTRY }}:${{ github.sha }}\",
              \"docker stop --time=10 my-app || true\",
              \"docker rm my-app || true\",
              \"docker run -d -p 8080:8080 --name my-app ${{ secrets.ECR_REGISTRY }}:${{ github.sha }}\"
            ]" \
            --output text
